buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven { url "http://www.openforis.org/nexus/content/groups/public/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    // - model project
    implementation(project(':model')) {
        transitive = true
        exclude group: 'commons-collections'
        exclude group: 'commons-beanutils'
        exclude group: 'commons-logging'
        exclude group: 'xmlpull'
        exclude group: 'cglib'
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'log4j'
        exclude group: 'org.apache.lucene'
    }
    // commons-lang: version > 3.4 require Java 7
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'org.sqldroid:sqldroid:1.0.3'

    // - app
    implementation 'androidx.appcompat:appcompat:1.3.1'
    // For loading and tinting drawables on older versions of the platform
    implementation 'androidx.appcompat:appcompat-resources:1.3.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.material:material:1.4.0'

    // page indicator
    implementation 'com.romandanylyk:pageindicatorview:1.0.3'
    // file chooser (survey import)
    implementation 'com.nononsenseapps:filepicker:4.1.0'

    // storage chooser (working directory chooser)
//    implementation 'com.github.codekidX:storage-chooser:2.0.4.4'
    implementation 'com.github.mendhak:storage-chooser:2.0.4.4b'
    // TableFixHeaders (entity list)
    implementation 'com.github.InQBarna:TableFixHeaders:master'
    // about page
    implementation 'com.github.medyo:android-about-page:1.2.5'

    // logging
    implementation 'org.slf4j:slf4j-android:1.6.1-RC1'
    // log4j: last version working with Java 6 is 2.3
    implementation 'org.apache.logging.log4j:log4j-api:2.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.3'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.3'
}

// load properties from local.properties file
def localProps = new Properties()
File localPropsFile = rootProject.file('local.properties')
if (localPropsFile.exists()) localProps.load(localPropsFile.newDataInputStream())

int actualVersionCode = currentVersionCode as int
String actualVersionName = currentVersionName

boolean isRelease = System.properties['release'] == 'true'

if (isRelease) {
    actualVersionCode = actualVersionCode + 1
    actualVersionName = System.properties['versionName'] ?: actualVersionName

    def props = new Properties()
    def propsFile = rootProject.file('gradle.properties')
    props.load(propsFile.newDataInputStream())

    props.setProperty('currentVersionCode', actualVersionCode as String)
    props.setProperty('currentVersionName', actualVersionName)
    props.store(propsFile.newWriter(), null)

    println "**************************************************************************"
    println "*** Releasing: $actualVersionName with build number $actualVersionCode ***"
    println "**************************************************************************"
}

android {
    compileSdkVersion 33
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId 'org.openforis.collect'
        minSdkVersion 16
        targetSdkVersion 33
        versionCode actualVersionCode
        versionName actualVersionName
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    if (isRelease)
        signingConfigs {
            release {
                storeFile(file(localProps.storeFile))
                storePassword(localProps.storePassword)
                keyAlias(localProps.keyAlias)
                keyPassword(localProps.keyPassword)
            }
        }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (isRelease) {
                signingConfig signingConfigs.release
                applicationVariants.all { variant ->
                    variant.outputs.all { output ->
                        def outputFileName = output.outputFileName
                        if (outputFileName != null && outputFileName.endsWith('.apk')) {
                            output.outputFileName = 'Collect.apk'
                        }
                    }
                }
            }
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/spring.*'
    }
    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
    productFlavors {
    }
}
//
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId 'org.openforis.collect.android'
//            artifactId 'collect-mobile'
//            version actualVersionCode as String
//            artifact file('build/outputs/apk/release/Collect.apk')
//        }
//    }
//    repositories {
//        maven {
//            url "http://www.openforis.org/nexus/content/repositories/releases/"
//            credentials {
//                username localProps.getProperty('nexus.username')
//                password localProps.getProperty('nexus.password')
//            }
//        }
//    }
//}
